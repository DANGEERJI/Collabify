//prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  username       String?   @unique
  bio            String?
  skills         String[]  // ✅ PostgreSQL supports arrays
  interests      String[]
  githubUrl      String?
  linkedinUrl    String?
  portfolioUrl   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


//src/app/api/auth/[...nextauth]/route.ts

import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };



//src/app/api/user/profile/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET() {
   const session = await getServerSession(authOptions);
   
   if (!session?.user?.email) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
   }

   try {
      const user = await prisma.user.findUnique({
         where: { email: session.user.email },
         select: {
         id: true,
         username: true,
         name: true,
         email: true,
         bio: true,
         skills: true,
         interests: true,
         githubUrl: true,
         linkedinUrl: true,
         portfolioUrl: true,
         createdAt: true,
         },
      });

      if (!user) {
         return NextResponse.json({ error: "User not found" }, { status: 404 });
      }

      return NextResponse.json(user);
   } catch (error) {
      console.error("Error fetching user profile:", error);
      return NextResponse.json(
         { error: "Failed to fetch user profile" },
         { status: 500 }
      );
   }
}



//src/app/api/user/check-username/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function POST(req: Request) {
   try {
      const { username } = await req.json();

      if (!username || username.length < 3) {
         return NextResponse.json(
         { error: "Username must be at least 3 characters long" },
         { status: 400 }
         );
      }

      // Check if username already exists
      const existingUser = await prisma.user.findUnique({
         where: { username },
      });

      if (existingUser) {
         return NextResponse.json(
         { error: "Username is already taken" },
         { status: 409 }
         );
      }

      return NextResponse.json({ available: true });
   } catch (error) {
      console.error("Username check error:", error);
      return NextResponse.json(
         { error: "Failed to check username availability" },
         { status: 500 }
      );
   }
}


//src/app/api/user/onboarding/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function POST(req: Request) {
   const session = await getServerSession(authOptions);
   if (!session?.user || !session.user.email) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
   }

   const data = await req.json();
   const { username, bio, skills, interests, githubUrl, linkedinUrl, portfolioUrl } = data;

   if (!username || username.length < 3) {
      return NextResponse.json({ error: "Username must be at least 3 characters long" }, { status: 400 });
   }

   // Check for duplicate username
   const existingUser = await prisma.user.findUnique({
      where: { username },
   });

   if (existingUser) {
      return NextResponse.json({ error: "Username already taken" }, { status: 400 });
   }

   // Update user with onboarding info
   await prisma.user.update({
      where: { email: session.user.email },
      data: {
         username,
         bio,
         skills,
         interests,
         githubUrl,
         linkedinUrl,
         portfolioUrl,
      },
   });

   return NextResponse.json({ success: true });
}



//src/app/auth/signin/page.tsx

"use client";
import { signIn, getProviders } from "next-auth/react";
import { useEffect, useState } from "react";

export default function SignIn() {
   const [providers, setProviders] = useState<any>(null);

   useEffect(() => {
      const fetchProviders = async () => {
         const res = await getProviders();
         setProviders(res);
      };
      fetchProviders();
   }, []);

   return (
      <div className="min-h-screen flex items-center justify-center">
         <div className="max-w-md w-full bg-white p-8 rounded-lg shadow-md">
         <h1 className="text-2xl font-bold text-center mb-6">Sign In</h1>
         {providers &&
            Object.values(providers).map((provider: any) => (
               <button
               key={provider.name}
               onClick={() => signIn(provider.id)}
               className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
               >
               Sign in with {provider.name}
               </button>
            ))}
         </div>
      </div>
   );
}



// src/app/onboarding/OnboardingForm.tsx
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";

const PREDEFINED_SKILLS = [
   "JavaScript", "Python", "React", "Node.js", "TypeScript", "Java", "C++", "C#",
   "HTML/CSS", "PHP", "Ruby", "Go", "Rust", "Swift", "Kotlin", "Flutter",
   "React Native", "Vue.js", "Angular", "Next.js", "Express.js", "Django",
   "Flask", "Spring Boot", "Laravel", "Ruby on Rails", "ASP.NET", "FastAPI",
   "MongoDB", "PostgreSQL", "MySQL", "Redis", "Firebase", "AWS", "Azure",
   "Google Cloud", "Docker", "Kubernetes", "Git", "Linux", "DevOps", "CI/CD",
   "Machine Learning", "Data Science", "AI", "Deep Learning", "TensorFlow",
   "PyTorch", "Data Analysis", "Statistics", "R", "Tableau", "Power BI",
   "UI/UX Design", "Figma", "Adobe XD", "Photoshop", "Illustrator", "Sketch",
   "Game Development", "Unity", "Unreal Engine", "Blender", "3D Modeling",
   "Mobile Development", "iOS Development", "Android Development", "Cross-platform",
   "Backend Development", "Frontend Development", "Full-stack Development",
   "API Development", "GraphQL", "REST APIs", "Microservices", "Blockchain",
   "Web3", "Solidity", "Cybersecurity", "Penetration Testing", "Network Security"
];

export default function OnboardingForm() {
   const [formData, setFormData] = useState({
      username: "",
      bio: "",
      githubUrl: "",
      linkedinUrl: "",
      portfolioUrl: "",
   });
   const [selectedSkills, setSelectedSkills] = useState<string[]>([]);
   const [customSkill, setCustomSkill] = useState("");
   const [error, setError] = useState("");
   const [isLoading, setIsLoading] = useState(false);
   const [isCheckingUsername, setIsCheckingUsername] = useState(false);
   const [usernameError, setUsernameError] = useState("");
   const { data: session } = useSession();
   const router = useRouter();

   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      setFormData({ ...formData, [e.target.name]: e.target.value });
      
      // Clear username error when user starts typing
      if (e.target.name === "username") {
         setUsernameError("");
      }
   };

   const checkUsernameAvailability = async (username: string) => {
      if (username.length < 3) {
         setUsernameError("Username must be at least 3 characters long");
         return;
      }

      setIsCheckingUsername(true);
      try {
         const res = await fetch("/api/user/check-username", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({ username }),
         });
         const data = await res.json();
         
         if (!res.ok) {
         setUsernameError(data.error || "Error checking username");
         } else {
         setUsernameError(""); // Username is available
         }
      } catch (err) {
         setUsernameError("Error checking username availability");
      } finally {
         setIsCheckingUsername(false);
      }
   };

   const handleUsernameBlur = () => {
      if (formData.username) {
         checkUsernameAvailability(formData.username);
      }
   };

   const toggleSkill = (skill: string) => {
      setSelectedSkills(prev => 
         prev.includes(skill) 
         ? prev.filter(s => s !== skill)
         : [...prev, skill]
      );
   };

   const addCustomSkill = () => {
      const trimmedSkill = customSkill.trim();
      if (trimmedSkill && !selectedSkills.includes(trimmedSkill)) {
         setSelectedSkills([...selectedSkills, trimmedSkill]);
         setCustomSkill("");
      }
   };

   const removeSkill = (skillToRemove: string) => {
      setSelectedSkills(prev => prev.filter(skill => skill !== skillToRemove));
   };

   const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      
      if (usernameError) {
         setError("Please fix the username error before submitting");
         return;
      }

      setIsLoading(true);
      setError("");

      try {
         const payload = {
         username: formData.username,
         bio: formData.bio || null,
         skills: selectedSkills,
         interests: [], // You can add interests section later if needed
         githubUrl: formData.githubUrl || null,
         linkedinUrl: formData.linkedinUrl || null,
         portfolioUrl: formData.portfolioUrl || null,
         };

         const res = await fetch("/api/user/onboarding", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify(payload),
         });

         const data = await res.json();

         if (res.ok) {
         // Force a hard redirect to dashboard after successful onboarding
         window.location.href = "/dashboard";
         } else {
         setError(data.error || "Something went wrong.");
         }
      } catch (err) {
         setError("Network error. Please try again.");
      } finally {
         setIsLoading(false);
      }
   };

   return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4">
         <div className="max-w-4xl mx-auto">
         {/* Header */}
         <div className="text-center mb-8">
            <div className="w-20 h-20 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
               <span className="text-2xl text-white font-bold">🎯</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
               Welcome to Collabify, {session?.user?.name?.split(' ')[0]}!
            </h1>
            <p className="text-gray-600 text-lg">
               Let's set up your profile so other students can discover your skills
            </p>
            <p className="text-sm text-gray-500 mt-2">
               Only username is required - you can add other details later
            </p>
         </div>

         {/* Form Card */}
         <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
            <form onSubmit={handleSubmit} className="space-y-8">
               {/* Username - Required */}
               <div>
               <label htmlFor="username" className="block text-sm font-semibold text-gray-700 mb-2">
                  Username <span className="text-red-500">*</span>
               </label>
               <div className="relative">
                  <input
                     id="username"
                     name="username"
                     type="text"
                     required
                     value={formData.username}
                     onChange={handleChange}
                     onBlur={handleUsernameBlur}
                     placeholder="e.g., johndoe123"
                     className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:border-transparent transition-all duration-200 placeholder-gray-400 ${
                     usernameError 
                        ? 'border-red-300 focus:ring-red-200' 
                        : 'border-gray-300 focus:ring-blue-500'
                     }`}
                  />
                  {isCheckingUsername && (
                     <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                     <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                     </div>
                  )}
               </div>
               {usernameError && (
                  <p className="text-red-500 text-sm mt-1">{usernameError}</p>
               )}
               {!usernameError && formData.username.length >= 3 && !isCheckingUsername && (
                  <p className="text-green-500 text-sm mt-1">✓ Username is available</p>
               )}
               </div>

               {/* Skills Section */}
               <div>
               <label className="block text-sm font-semibold text-gray-700 mb-4">
                  Skills <span className="text-gray-400 font-normal">(Optional)</span>
               </label>
               
               {/* Selected Skills */}
               {selectedSkills.length > 0 && (
                  <div className="mb-4">
                     <p className="text-sm text-gray-600 mb-2">Selected Skills ({selectedSkills.length}):</p>
                     <div className="flex flex-wrap gap-2">
                     {selectedSkills.map((skill) => (
                        <span
                           key={skill}
                           className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 border border-blue-200"
                        >
                           {skill}
                           <button
                           type="button"
                           onClick={() => removeSkill(skill)}
                           className="ml-2 text-blue-600 hover:text-blue-800 font-semibold"
                           >
                           ×
                           </button>
                        </span>
                     ))}
                     </div>
                  </div>
               )}

               {/* Add Custom Skill */}
               <div className="mb-4 p-4 bg-gray-50 rounded-lg border">
                  <p className="text-sm font-medium text-gray-700 mb-2">Add Custom Skill:</p>
                  <div className="flex gap-2">
                     <input
                     type="text"
                     value={customSkill}
                     onChange={(e) => setCustomSkill(e.target.value)}
                     placeholder="Type a skill and click Add"
                     className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                     onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addCustomSkill())}
                     />
                     <button
                     type="button"
                     onClick={addCustomSkill}
                     disabled={!customSkill.trim()}
                     className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                     >
                     Add
                     </button>
                  </div>
               </div>

               {/* Predefined Skills Grid */}
               <div className="border border-gray-200 rounded-lg p-4">
                  <p className="text-sm font-medium text-gray-700 mb-3">Or choose from popular skills:</p>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2 max-h-64 overflow-y-auto">
                     {PREDEFINED_SKILLS.map((skill) => (
                     <button
                        key={skill}
                        type="button"
                        onClick={() => toggleSkill(skill)}
                        className={`px-3 py-2 text-sm rounded-lg border transition-all duration-200 text-left ${
                           selectedSkills.includes(skill)
                           ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
                           : 'bg-white text-gray-700 border-gray-300 hover:border-blue-300 hover:bg-blue-50'
                        }`}
                     >
                        {skill}
                     </button>
                     ))}
                  </div>
               </div>
               </div>

               {/* Bio - Optional */}
               <div>
               <label htmlFor="bio" className="block text-sm font-semibold text-gray-700 mb-2">
                  Bio <span className="text-gray-400 font-normal">(Optional)</span>
               </label>
               <textarea
                  id="bio"
                  name="bio"
                  rows={4}
                  value={formData.bio}
                  onChange={handleChange}
                  placeholder="Tell us about yourself, your goals, and what you're passionate about..."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder-gray-400 resize-none"
               />
               </div>

               {/* Links Section - Optional */}
               <div className="space-y-4">
               <h3 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2">
                  Your Links <span className="text-gray-400 font-normal text-sm">(Optional - can be added later)</span>
               </h3>
               
               <div className="grid md:grid-cols-2 gap-4">
                  {/* GitHub */}
                  <div>
                     <label htmlFor="githubUrl" className="block text-sm font-medium text-gray-700 mb-2">
                     GitHub Profile
                     </label>
                     <input
                     id="githubUrl"
                     name="githubUrl"
                     type="url"
                     value={formData.githubUrl}
                     onChange={handleChange}
                     placeholder="https://github.com/yourusername"
                     className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder-gray-400"
                     />
                  </div>

                  {/* LinkedIn */}
                  <div>
                     <label htmlFor="linkedinUrl" className="block text-sm font-medium text-gray-700 mb-2">
                     LinkedIn Profile
                     </label>
                     <input
                     id="linkedinUrl"
                     name="linkedinUrl"
                     type="url"
                     value={formData.linkedinUrl}
                     onChange={handleChange}
                     placeholder="https://linkedin.com/in/yourusername"
                     className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder-gray-400"
                     />
                  </div>
               </div>

               {/* Portfolio */}
               <div>
                  <label htmlFor="portfolioUrl" className="block text-sm font-medium text-gray-700 mb-2">
                     Portfolio Website
                  </label>
                  <input
                     id="portfolioUrl"
                     name="portfolioUrl"
                     type="url"
                     value={formData.portfolioUrl}
                     onChange={handleChange}
                     placeholder="https://yourportfolio.com"
                     className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder-gray-400"
                  />
               </div>
               </div>

               {/* Error Message */}
               {error && (
               <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-600 text-sm">{error}</p>
               </div>
               )}

               {/* Submit Button */}
               <button
               type="submit"
               disabled={isLoading || !!usernameError || !formData.username}
               className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 focus:ring-4 focus:ring-blue-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
               >
               {isLoading ? (
                  <>
                     <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                     <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                     <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                     </svg>
                     Creating your profile...
                  </>
               ) : (
                  "Complete Profile Setup"
               )}
               </button>
            </form>
         </div>

         {/* Footer */}
         <div className="text-center mt-8">
            <p className="text-sm text-gray-500">
               Don't worry! You can always update your profile and add more details later
            </p>
         </div>
         </div>
      </div>
   );
}


// src/app/dashboard/DashboardContent.tsx
"use client";
import { signOut } from "next-auth/react";
import { useState } from "react";

interface User {
   id: string;
   username: string | null;
   name: string | null;
   bio: string | null;
   skills: string[];
   interests: string[];
   createdAt: Date;
   githubUrl: string | null;
   linkedinUrl: string | null;
   portfolioUrl: string | null;
}

interface DashboardContentProps {
   user: User;
}

export default function DashboardContent({ user }: DashboardContentProps) {
   const [activeTab, setActiveTab] = useState<'overview' | 'projects' | 'teammates'>('overview');

   const formatDate = (date: Date) => {
      return new Intl.DateTimeFormat('en-US', { 
         month: 'long', 
         year: 'numeric' 
      }).format(new Date(date));
   };

   // Handle sign out with proper redirect
   const handleSignOut = () => {
      signOut({ 
         callbackUrl: '/', // Explicitly redirect to homepage
         redirect: true 
      });
   };

   // Handle potential null values safely
   const displayName = user.name?.split(' ')[0] || 'there';
   const displayUsername = user.username || 'unknown';

   return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
         {/* Header */}
         <header className="bg-white shadow-sm border-b border-gray-200">
         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
               <div className="flex items-center space-x-4">
               <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-lg">C</span>
               </div>
               <h1 className="text-2xl font-bold text-gray-900">Collabify</h1>
               </div>
               
               <div className="flex items-center space-x-4">
               <div className="text-right">
                  <p className="text-sm font-medium text-gray-900">{user.name}</p>
                  <p className="text-xs text-gray-500">@{displayUsername}</p>
               </div>
               <button
                  onClick={handleSignOut}
                  className="text-sm text-gray-500 hover:text-gray-700 px-3 py-1 rounded border border-gray-300 hover:border-gray-400 transition-colors"
               >
                  Sign Out
               </button>
               </div>
            </div>
         </div>
         </header>

         <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
         {/* Welcome Section */}
         <div className="mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-2">
               Welcome back, {displayName}! 👋
            </h2>
            <p className="text-gray-600">
               Ready to collaborate and build something amazing today?
            </p>
         </div>

         {/* Stats Cards */}
         <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
               <div className="flex items-center">
               <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <span className="text-2xl">🎯</span>
               </div>
               <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active Projects</p>
                  <p className="text-2xl font-bold text-gray-900">0</p>
               </div>
               </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
               <div className="flex items-center">
               <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <span className="text-2xl">👥</span>
               </div>
               <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Connections</p>
                  <p className="text-2xl font-bold text-gray-900">0</p>
               </div>
               </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
               <div className="flex items-center">
               <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <span className="text-2xl">⚡</span>
               </div>
               <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Skills</p>
                  <p className="text-2xl font-bold text-gray-900">{user.skills.length}</p>
               </div>
               </div>
            </div>
         </div>

         {/* Navigation Tabs */}
         <div className="mb-6">
            <nav className="flex space-x-8 border-b border-gray-200">
               {[
               { id: 'overview', name: 'Overview', icon: '📊' },
               { id: 'projects', name: 'Projects', icon: '🚀' },
               { id: 'teammates', name: 'Find Teammates', icon: '🔍' }
               ].map((tab) => (
               <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                     activeTab === tab.id
                     ? 'border-blue-500 text-blue-600'
                     : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
               >
                  <span>{tab.icon}</span>
                  <span>{tab.name}</span>
               </button>
               ))}
            </nav>
         </div>

         {/* Tab Content */}
         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Main Content */}
            <div className="lg:col-span-2">
               {activeTab === 'overview' && (
               <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                     <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
                     <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                     <button className="flex items-center justify-center space-x-3 p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400 hover:bg-blue-50 transition-colors group">
                        <span className="text-2xl">➕</span>
                        <span className="font-medium text-gray-700 group-hover:text-blue-600">Create Project</span>
                     </button>
                     <button className="flex items-center justify-center space-x-3 p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-green-400 hover:bg-green-50 transition-colors group">
                        <span className="text-2xl">🔍</span>
                        <span className="font-medium text-gray-700 group-hover:text-green-600">Find Teammates</span>
                     </button>
                     </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                     <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
                     <div className="space-y-4">
                     <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                           <span className="text-sm">🎉</span>
                        </div>
                        <div>
                           <p className="text-sm font-medium text-gray-900">Welcome to Collabify!</p>
                           <p className="text-xs text-gray-500">Joined {formatDate(user.createdAt)}</p>
                        </div>
                     </div>
                     <div className="text-center py-8">
                        <p className="text-gray-500 text-sm">No recent activity yet. Start by creating a project or finding teammates!</p>
                     </div>
                     </div>
                  </div>
               </div>
               )}

               {activeTab === 'projects' && (
               <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="text-center py-12">
                     <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                     <span className="text-3xl">🚀</span>
                     </div>
                     <h3 className="text-lg font-semibold text-gray-900 mb-2">No Projects Yet</h3>
                     <p className="text-gray-500 mb-6">Start your first project and invite others to collaborate!</p>
                     <button className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                     Create Your First Project
                     </button>
                  </div>
               </div>
               )}

               {activeTab === 'teammates' && (
               <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="text-center py-12">
                     <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                     <span className="text-3xl">👥</span>
                     </div>
                     <h3 className="text-lg font-semibold text-gray-900 mb-2">Find Your Perfect Teammates</h3>
                     <p className="text-gray-500 mb-6">Discover talented students with complementary skills!</p>
                     <button className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
                     Start Searching
                     </button>
                  </div>
               </div>
               )}
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
               {/* Profile Card */}
               <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
               <h3 className="text-lg font-semibold text-gray-900 mb-4">Your Profile</h3>
               <div className="space-y-4">
                  <div>
                     <p className="text-sm font-medium text-gray-600">Bio</p>
                     <p className="text-sm text-gray-900 mt-1">
                     {user.bio || "Add a bio to tell others about yourself!"}
                     </p>
                  </div>
                  
                  {user.skills.length > 0 && (
                     <div>
                     <p className="text-sm font-medium text-gray-600 mb-2">Skills</p>
                     <div className="flex flex-wrap gap-1">
                        {user.skills.slice(0, 6).map((skill) => (
                           <span key={skill} className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
                           {skill}
                           </span>
                        ))}
                        {user.skills.length > 6 && (
                           <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-600">
                           +{user.skills.length - 6} more
                           </span>
                        )}
                     </div>
                     </div>
                  )}

                  {/* Links */}
                  {(user.githubUrl || user.linkedinUrl || user.portfolioUrl) && (
                     <div>
                     <p className="text-sm font-medium text-gray-600 mb-2">Links</p>
                     <div className="space-y-2">
                        {user.githubUrl && (
                           <a href={user.githubUrl} target="_blank" rel="noopener noreferrer" 
                              className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-700">
                           <span>🔗</span>
                           <span>GitHub</span>
                           </a>
                        )}
                        {user.linkedinUrl && (
                           <a href={user.linkedinUrl} target="_blank" rel="noopener noreferrer"
                              className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-700">
                           <span>💼</span>
                           <span>LinkedIn</span>
                           </a>
                        )}
                        {user.portfolioUrl && (
                           <a href={user.portfolioUrl} target="_blank" rel="noopener noreferrer"
                              className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-700">
                           <span>🌐</span>
                           <span>Portfolio</span>
                           </a>
                        )}
                     </div>
                     </div>
                  )}

                  <button className="w-full text-sm text-blue-600 hover:text-blue-700 font-medium py-2 border border-blue-200 rounded-lg hover:bg-blue-50 transition-colors">
                     Edit Profile
                  </button>
               </div>
               </div>

               {/* Tips Card */}
               <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl border border-blue-200 p-6">
               <h3 className="text-lg font-semibold text-gray-900 mb-2">💡 Getting Started</h3>
               <div className="space-y-3 text-sm">
                  <div className="flex items-start space-x-2">
                     <span className="text-green-500 mt-0.5">✓</span>
                     <span className="text-gray-700">Complete your profile</span>
                  </div>
                  <div className="flex items-start space-x-2">
                     <span className="text-gray-400 mt-0.5">○</span>
                     <span className="text-gray-600">Create your first project</span>
                  </div>
                  <div className="flex items-start space-x-2">
                     <span className="text-gray-400 mt-0.5">○</span>
                     <span className="text-gray-600">Find and connect with teammates</span>
                  </div>
                  <div className="flex items-start space-x-2">
                     <span className="text-gray-400 mt-0.5">○</span>
                     <span className="text-gray-600">Join other interesting projects</span>
                  </div>
               </div>
               </div>
            </div>
         </div>
         </main>
      </div>
   );
}



// src/app/dashboard/page.tsx
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { redirect } from "next/navigation";
import { prisma } from "@/lib/prisma";
import DashboardContent from "./DashboardContent";

export default async function DashboardPage() {
   const session = await getServerSession(authOptions);
   
   if (!session?.user) {
      redirect("/auth/signin");
   }

   const user = await prisma.user.findUnique({
      where: { email: session.user.email! },
      select: { 
         id: true,
         username: true, 
         name: true,
         bio: true,
         skills: true,
         interests: true,
         createdAt: true,
         githubUrl: true,
         linkedinUrl: true,
         portfolioUrl: true
      }
   });

   if (!user?.username) {
      redirect("/onboarding");
   }

   return <DashboardContent user={user} />;
}


//src/app/onboarding/page.tsx

import { getServerSession } from "next-auth";
import { authOptions } from "../../lib/auth";
import { redirect } from "next/navigation";
import { prisma } from "../../lib/prisma";
import OnboardingForm from "./OnboardingForm";

export default async function OnboardingPage() {
   const session = await getServerSession(authOptions);
   
   if (!session?.user) {
      redirect("/auth/signin");
   }

   const user = await prisma.user.findUnique({
      where: { email: session.user.email! },
      select: { username: true }
   });

   if (user?.username) {
      redirect("/");
   }

   return <OnboardingForm />;
}


/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

// src/app/layout.tsx
import { Inter } from 'next/font/google'
import './globals.css'
import { Providers } from './providers'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Collabify - Student Collaboration Platform',
  description: 'Connect with students across universities for projects and collaboration',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  )
}


//src/app/page.tsx

'use client';

import { useEffect, useState } from "react";
import { useSession, signIn } from "next-auth/react";
import { useRouter } from "next/navigation";

export default function Home() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [isChecking, setIsChecking] = useState(true);

  useEffect(() => {
    const checkUserStatus = async () => {
      if (status === "authenticated" && session?.user?.email) {
        try {
          // Fetch fresh user data from the database
          const response = await fetch('/api/user/profile');
          const userData = await response.json();
          
          if (response.ok && userData.username) {
            // User has completed onboarding
            router.push("/dashboard");
          } else if (response.ok && !userData.username) {
            // User hasn't completed onboarding
            router.push("/onboarding");
          }
        } catch (error) {
          console.error("Error checking user status:", error);
          // Fallback to session data
          if (!session?.user?.username) {
            router.push("/onboarding");
          } else {
            router.push("/dashboard");
          }
        }
      }
      setIsChecking(false);
    };

    if (status !== "loading") {
      checkUserStatus();
    }
  }, [session, status, router]);

  if (status === "loading" || (status === "authenticated" && isChecking)) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
            <span className="text-2xl text-white font-bold">C</span>
          </div>
          <p className="text-lg text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  // While redirecting to onboarding or dashboard, show loading
  if (status === "authenticated") {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl text-white font-bold">C</span>
          </div>
          <p className="text-lg text-gray-600">Redirecting...</p>
        </div>
      </div>
    );
  }

  // Landing page for unauthenticated users
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Hero Section */}
      <div className="flex flex-col items-center justify-center min-h-screen px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          {/* Logo */}
          <div className="w-20 h-20 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg">
            <span className="text-3xl text-white font-bold">C</span>
          </div>
          
          {/* Main Heading */}
          <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-gray-900 mb-6 tracking-tight">
            Welcome to{" "}
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Collabify
            </span>
          </h1>
          
          {/* Subtitle */}
          <p className="text-xl sm:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed">
            Connect with talented students across universities. 
            Find teammates, showcase your skills, and build amazing projects together.
          </p>
          
          {/* Features */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-8 mb-12 max-w-4xl mx-auto">
            <div className="text-center bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🤝</span>
              </div>
              <h3 className="font-semibold text-gray-900 mb-2 text-lg">Find Teammates</h3>
              <p className="text-gray-600">Discover students with complementary skills for your projects</p>
            </div>
            <div className="text-center bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🚀</span>
              </div>
              <h3 className="font-semibold text-gray-900 mb-2 text-lg">Build Projects</h3>
              <p className="text-gray-600">Collaborate on exciting projects and learn together</p>
            </div>
            <div className="text-center bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🏆</span>
              </div>
              <h3 className="font-semibold text-gray-900 mb-2 text-lg">Showcase Skills</h3>
              <p className="text-gray-600">Build your portfolio and get recognized by peers</p>
            </div>
          </div>
          
          {/* CTA Button */}
          <div className="space-y-4">
            <button
              onClick={() => signIn('google')}
              className="bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold px-8 py-4 rounded-xl hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl text-lg"
            >
              Get Started with Google
            </button>
            
            <p className="text-sm text-gray-500">
              Free for all students • No credit card required
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}


// src/app/providers.tsx
'use client'

import { SessionProvider } from 'next-auth/react'

export function Providers({ children }: { children: React.ReactNode }) {
   return <SessionProvider>{children}</SessionProvider>
}

//src/lib/auth.ts

import { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import { prisma } from "./prisma";

export const authOptions: NextAuthOptions = {
   adapter: PrismaAdapter(prisma),
   providers: [
      GoogleProvider({
         clientId: process.env.GOOGLE_CLIENT_ID!,
         clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      }),
   ],
   secret: process.env.NEXTAUTH_SECRET,
   session: {
      strategy: "jwt",
   },
   pages: {
      signIn: "/", // Redirect to homepage instead of custom sign-in page
      // Remove the custom sign-in page from NextAuth config
   },
   callbacks: {
      jwt: async ({ token, user }) => {
         // First time - on sign-in
         if (user) {
         token.id = user.id;
         token.name = user.name ?? null;
         token.email = user.email ?? null;
         token.picture = user.image ?? null;
         token.username = user.username ?? null;
         }
         
         // Fetch from DB if username is missing (e.g., during token reuse)
         if (!token.username && token.id) {
         const dbUser = await prisma.user.findUnique({
            where: { id: token.id as string },
         });
         if (dbUser) {
            token.username = dbUser.username ?? null;
            token.name = dbUser.name ?? null;
            token.email = dbUser.email ?? null;
            token.picture = dbUser.image ?? null;
         }
         }
         
         return token;
      },
      session: async ({ session, token }) => {
         if (session.user && token) {
         session.user.id = token.id as string;
         session.user.name = token.name ?? null;
         session.user.email = token.email ?? null;
         session.user.image = token.picture ?? null;
         session.user.username = token.username ?? null;
         }
         
         return session;
      },
      // Add redirect callback to handle post-signin routing
      redirect: async ({ url, baseUrl }) => {
         // If user is signing out, redirect to homepage
         if (url.includes('/api/auth/signout')) {
         return baseUrl;
         }
         
         // If it's a relative URL, make it absolute
         if (url.startsWith('/')) {
         return `${baseUrl}${url}`;
         }
         
         // If it's the same origin, allow it
         if (new URL(url).origin === baseUrl) {
         return url;
         }
         
         // Default to homepage
         return baseUrl;
      },
   },
};



// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as {
   prisma: PrismaClient | undefined;
};

export const prisma =
   globalForPrisma.prisma ??
   new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;



// src/types/next-auth.d.ts

import NextAuth from "next-auth";

declare module "next-auth" {
   interface Session {
      user: {
         id: string;
         name?: string | null;
         email?: string | null;
         image?: string | null;
         username?: string | null;
      };
   }

   interface User {
      id: string;
      username?: string | null;
   }
   }

   declare module "next-auth/jwt" {
   interface JWT {
      id?: string;
      username?: string | null;
   }
}



{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "types": [
      "next-auth"
    ]
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts,",
    "next-env.d.ts",
    "types/next-auth.d.ts",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}